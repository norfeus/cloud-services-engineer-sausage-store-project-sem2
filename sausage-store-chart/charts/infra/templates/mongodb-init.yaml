apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-mongodb-init
  namespace: {{ .Release.Namespace }}
  labels: {{- include "mongodb.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-mongodb-init
      namespace: {{ .Release.Namespace }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb-init
        app.kubernetes.io/instance: "{{ .Release.Name }}"
    spec:
      containers:
        - name: mongodb-init
          image: mongo:7.0
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "100m"
          command:
            - sh
            - -c
            - |
              until mongosh --host mongodb --port 27017 \
                -u {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }} \
                -p {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }} \
                --authenticationDatabase admin \
                --eval 'db.adminCommand("ping")'; do
                echo "Waiting for MongoDB to be ready...";
                sleep 5;
              done;

              mongosh --host mongodb --port 27017 \
                -u {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }} \
                -p {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }} \
                --authenticationDatabase admin \
                --eval '
                db = db.getSiblingDB("reports");
                if (!db.getUser("reportsuser")) {
                  db.createUser({
                    user: "reportsuser",
                    pwd: "reportspassword",
                    roles: [
                      { role: "readWrite", db: "reports" }
                    ]
                  });
                } else {
                  print("User reportsuser already exists.");
                }'
      restartPolicy: OnFailure